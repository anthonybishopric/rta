#! /usr/bin/env ruby

require 'rb-fsevent'
require 'optparse'

options = {:sleep => 0}
excludes = []
includes = []
verbose = false

opts = OptionParser.new do |opts|
  opts.banner = "Run a command when contents in this directory change.\nUsage: #{File.basename(__FILE__)} [-n|--no-clear] <command>"
  opts.on("-n", "--[no-]clear", "Don't clear the screen before execution") do |n|
    options[:no_clear] = n
  end
  opts.on("-v", "--[no-]verbose", "Be verbose in outputing match decisions") do |v|
    verbose = v
  end
  opts.on("-i", "--include-dir DIRECTORY", "Watch the given directory for changes only. The value should be relative to the current working directory. Can be set multiple times.") do |d|
    includes.push(File.expand_path(d, Dir.pwd) + "/")
  end
  opts.on("-e", "--exclude-dir DIRECTORY", "Ignore the given directory when its contents change. The value should be relative to the current working directory.") do |d|
    excludes.push(File.expand_path(d, Dir.pwd) + "/")
  end
  opts.on("-s", "--sleep", "Sleep for a second after running the command. This can help prevent infinite loops") do
    options[:sleep] = 1
  end
  opts.on_tail("-h", "--help", "Show help") do
    puts opts
    exit
  end

end
opts.parse!

command = ARGV.join(" ")
if command == ""
  $stderr.puts "no command specified :("
  puts opts
  exit 1
end

unless options[:no_clear]
  command = "clear && #{command}"
end

active_thread = nil

# Trapping INT lets ctrl-C terminate
# the thread running the underlying call

Signal.trap("SIGINT") do
  if active_thread
    active_thread.kill
    active_thread = nil
    $stderr.puts "rta: killed active thread\n"
  else
    exit
  end
end

fsevent = FSEvent.new
active = false
fsevent.watch Dir.pwd do |directories|
  skip = true
  directories.each do |d|
    if excludes.include? d
      puts "excluding #{d}" if verbose
    else
      skip = false
      puts "#{excludes} does not contain #{d}" if verbose
    end
  end

  directories.each do |d|
    if includes.include? d
      skip = false
      puts "including #{d}" if verbose
    else
      puts "#{includes} does not contain #{d}" if verbose
    end
  end

  if not active and not skip
    active = true
    active_thread = Thread.new do
      system command
      sleep options[:sleep]
      active = false
      active_thread = nil
    end
  elsif verbose
    puts "did not execute - command is active" if active
    puts "did not execute - command was skipped" if skip
  end
end
fsevent.run